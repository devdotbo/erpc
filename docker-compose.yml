services:
  # eRPC Service (uncomment to run in Docker)
  # erpc:
  #   platform: linux/amd64
  #   image: ghcr.io/erpc/erpc:main
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./erpc.yaml:/erpc.yaml
  #     - ./.env:/.env
  #   env_file:
  #     - .env
  #   ports:
  #     - "4000:4000"  # HTTP API
  #     - "4001:4001"  # Metrics
  #   depends_on:
  #     - redis
  #   networks:
  #     - erpc

  # Redis for caching (REQUIRED)
  redis:
    container_name: erpc-redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - erpc

  # Optional: PostgreSQL for permanent finalized data storage
  # postgresql:
  #   container_name: erpc-postgresql
  #   image: postgres:13.4
  #   restart: always
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER:-erpc}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-erpc}
  #     POSTGRES_DB: ${POSTGRES_DB:-erpc}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - erpc

  # Optional: Monitoring stack (Prometheus + Grafana)
  # monitoring:
  #   build: ./monitoring
  #   ports:
  #     - "3000:3000"  # Grafana
  #     - "9090:9090"  # Prometheus
  #   environment:
  #     - SERVICE_ENDPOINT=host.docker.internal
  #     - SERVICE_PORT=4001
  #   volumes:
  #     - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
  #     - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
  #     - prometheus_data:/prometheus
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - erpc

networks:
  erpc:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: